geom_texthline(label = "Completely Human-Generated", yintercept = -0.5) +
geom_col(color = "black") +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black") +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black") +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black") +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 8, height = 5)
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", stroke = 0.01) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", stroke = 0.01) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.01) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.05) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.y = element_blank(), axis.title.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(expand = c(0, 0)) +
facet_wrap(~Year, scales = "free", nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Essays", expand = c(0, 0)) +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Statements", expand = c(0, 0)) +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text") +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text") +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank(), strip.text = "right")
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Majority AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.15) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2, strip.position = "right") +
theme(legend.position = "none", axis.text.x = element_blank(), axis.line.x = element_blank())
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.15, color = "grey60") +
geom_texthline(label = "Mostly AI-Generated", yintercept = 0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.15, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.15, color = "grey60") +
geom_col(color = "black", linewidth = 0.1) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2, strip.position = "right") +
theme(legend.position = "none", axis.text = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 8, height = 5)
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.2, color = "grey60") +
geom_texthline(label = "Mostly AI-Generated", yintercept = 0.25, hjust = 0.2, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.1, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.1, color = "grey60") +
geom_col(color = "black", linewidth = 0.1) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2, strip.position = "top") +
theme(legend.position = "none", axis.text = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 10, height = 5, dpi = 600)
ggsave("../figures/waterfall_probability_plot.svg", width = 10, height = 5)
renv::install("svglite")
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.2, color = "grey60") +
geom_texthline(label = "Mostly AI-Generated", yintercept = 0.25, hjust = 0.2, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.1, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.1, color = "grey60") +
geom_col(color = "black", linewidth = 0.1) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2, strip.position = "top") +
theme(legend.position = "none", axis.text = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 10, height = 5, dpi = 600)
ggsave("../figures/waterfall_probability_plot.svg", width = 10, height = 5)
# Load Required Packages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gtsummary))
# Set ggplot theme
theme_ns <- theme(text = element_text(family = "Arial"),
plot.title = element_text(face = "bold.italic", size = 18, hjust = 0, margin = margin(0,0,4,0)),
plot.subtitle = element_text(face = "italic", size = 14, hjust = 0, margin = margin(0,0,4,0)),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_text(face = "bold", size = 12),
axis.line = element_line(),
axis.ticks = element_blank(),
axis.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank(),
panel.background = element_blank(),
strip.text = element_text(size = 18, face = "italic"),
strip.background = element_blank())
theme_set(theme_ns)
# Load Data
metadata <- bind_rows(readxl::read_xlsx("../data/2022 Applicant List.xlsx"), readxl::read_xlsx("../data/2024 Applicant List.xlsx"))
other_essays <- readRDS("../results/essays_with_gptzero_preds_combined.rds")
personal_statements <- readRDS("../results/personal_comments_with_gptzero_preds_combined.rds")
controls <- readRDS("../results/controls_with_gptzero_preds_combined.rds")
# Combine Predictions with Applicant Metadata
results_full <- bind_rows(personal_statements, other_essays) |> left_join(metadata)
results <- results_full |> group_by(amcas_id, essay_type, year) |> slice_tail(n = 1) |> ungroup()
# Extract Relevant Columns and Reformat Necessary Features
model_input <-
results |>
transmute(essay_type, year, `Probability Human`, Confidence, Burstiness, status, visa_cd, total_gpa, appl_type_desc, gender, highest_total_score_2015,
age = as.numeric(ifelse(is.na(appl_submit_date), as_datetime(paste0(year, "-10-01")) - dob, appl_submit_date - dob))/365.25) |>
mutate(
Outcome = case_when(grepl("Matriculate|Offer Accepted|Offer Declined|Withdraw After Acceptance|Rescind|Deferred", status) ~ "Accepted",
grepl("Reject Before Interview|Waitlist Withdraw|Waitlist Declined|Reject|Waitlist Offered", status) ~ "Rejected",
grepl("Withdraw Before Interview|Withdraw After Interview|MD Withdraw - MSTP Reject", status) ~ NA),
gender = case_when(grepl("Male|Man", gender) ~ "Male", grepl("Female|Woman", gender) ~ "Female", T ~ "Other"),
visa_cd = ifelse(str_replace_na(visa_cd, "NO") == "NO", F, T),
across(where(is.character), ~ fct_infreq(factor(.x)))) |>
rename(Essay = essay_type, Year = year, Visa = visa_cd, GPA = total_gpa, Program = appl_type_desc, `Self-Reported Gender` = gender, MCAT = highest_total_score_2015, Age = age) |>
select(-status)
# Summarise Inputs
model_input |> summary()
tbl_summary(model_input, by = Year)
controls$essay_type
#| fig.width: 18
#| fig.height: 5
gg_waterfall_input <- model_input |> dplyr::filter(Essay == "Personal Comments") |> arrange(`Probability Human`) |> group_by(Year) |> mutate(x = row_number(), Year = factor(Year, levels = c("2024", "2022"))) |> mutate(y = 0.5 - `Probability Human`)
library(ggdist)
library(geomtextpath)
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) +
geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.2, color = "grey60") +
geom_texthline(label = "Mostly AI-Generated", yintercept = 0.25, hjust = 0.2, color = "grey80") +
geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.1, color = "grey80") +
geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.1, color = "grey60") +
geom_col(color = "black", linewidth = 0.1) +
scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) +
facet_wrap(~Year, nrow = 2, strip.position = "top") +
theme(legend.position = "none", axis.text = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 10, height = 5, dpi = 600)
ggsave("../figures/waterfall_probability_plot.svg", width = 10, height = 5)
gt_uv_all <-
tbl_uvregression(model_input |> select(Year, Essay, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Univariate Analysis", subtitle = "Application Metadata vs. Predicted Human-Generated Text")
tbl_summary(model_input, by = Year)
model_input |> filter(Essay = "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25)
model_input |> filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25)
model_input |> dplyr::filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25)
model_input |> dplyr::filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25) |> count(Year, low_human)
model_input |> dplyr::filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25) |> count(Year, low_human) |> mutate(prop = n/sum(n))
tbl_summary(bind_rows(controls |> mutate(Year = year), model_input), by = Year)
tbl_summary(bind_rows(controls |> transmute(Year = year, `Probability Human`), model_input), by = Year)
model_input |> dplyr::filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25) |> count(Year, low_human)
model_input |> dplyr::filter(Essay == "Personal Comments") |> mutate(low_human = `Probability Human` < 0.25) |> count(Year, low_human) |> fisher.test()
fisher.test(x = c(27, 973, 123, 877))
fisher.test(x = matrix(27, 973, 123, 877))
fisher.test(x = mat(c(27, 973, 123, 877), row = 2)
)
fisher.test(x = mat(c(27, 973, 123, 877), nrow = 2)
)
fisher.test(x = mat(c(27, 973, 123, 877), nrow = 2))
fisher.test(x = matrix(c(27, 973, 123, 877), nrow = 2))
fisher.test(x = matrix(c(0, 5, 123, 877), nrow = 2))
fisher.test(x = matrix(c(0, 8, 123, 877), nrow = 2))
fisher.test(x = matrix(c(0, 8, 27, 973), nrow = 2))
gt_uv_all <-
tbl_uvregression(model_input |> select(Year, Essay, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Univariate Analysis", subtitle = "Application Metadata vs. Predicted Human-Generated Text")
gt_uv_all <-
tbl_uvregression(model_input |> select(Year, Essay, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Univariate Analysis", subtitle = "Application Metadata vs. Predicted Human-Generated Text")
gt_uv_all
gt_uv_2024 <-
tbl_uvregression(model_input |> dplyr::filter(Year == 2024) |> select(Essay, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
gt_uv_2024
mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> select(Essay, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`))
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
forestmodel::forest_model(mv_model,
exponentiate = T,
factor_separate_line = T,
format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))
model_input
mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> select(Essay, Program, Age, `Self-Reported Gender`, Visa, GPA, MCAT, Outcome, `Probability Human`))
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
gt_uv_2024 <-
tbl_uvregression(model_input |> dplyr::filter(Year == 2024) |> select(Essay, Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
gt_uv_2024 <-
tbl_uvregression(model_input |> dplyr::filter(Year == 2024) |> select(Essay, Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
gt_uv_2024
mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> select(Essay, GPA, MCAT, Program, Age, `Self-Reported Gender`, Visa, `Probability Human`))
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> select(Essay, Program, Age, `Self-Reported Gender`, Visa, GPA, MCAT, `Probability Human`))
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_n(location = "level") |>
add_q() |>
bold_p(q = T)
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
forestmodel::forest_model(mv_model,
exponentiate = T,
factor_separate_line = T,
format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))
mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> select(Essay, Age, `Self-Reported Gender`, Program, Visa, GPA, MCAT, `Probability Human`))
tbl_regression(mv_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
forestmodel::forest_model(mv_model,
exponentiate = T,
factor_separate_line = T,
format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))
model_input
model_input$Outcome
model_input|> count(Outcome)
model_input |> count(Outcome)
model_input |> dplyr::filter(Year == 2024 & Essay == "Personal Comments") |> drop_na(Outcome)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
tbl_uvregression(glm, y = Outcome, exponentiate = T)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
select(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome) |>
tbl_uvregression(glm, y = Outcome, exponentiate = T)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
select(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
tbl_uvregression(glm, y = Outcome, exponentiate = T)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
tbl_uvregression(method = glm, y = Outcome, exponentiate = T)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
drop_na() |>
tbl_uvregression(method = glm, y = Outcome, exponentiate = T)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
drop_na() |> count(Outcome)
model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
drop_na() |>
glm(Outcome ~ ., family = "binomial")
mv_outcome_input <- model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, `Probability Human`, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
drop_na()
mv_outcome_model <- glm(Outcome ~ ., data = mv_outcome_input, family = "binomial")
mv_outcome_model
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
mv_outcome_input <- model_input |>
dplyr::filter(Year == 2024 & Essay == "Personal Comments") |>
drop_na(Outcome) |>
transmute(`Probability Human`, Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
drop_na()
mv_outcome_model <- glm(Outcome ~ ., data = mv_outcome_input, family = "binomial")
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
forestmodel::forest_model(mv_outcome_model,
exponentiate = T,
factor_separate_line = T,
format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
gt_mv_outcome <-
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.html")
gt_mv_outcome <-
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T)
gt_mv_outcome <-
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Multivariate Analysis", subtitle = "Admissions Outcome vs. Application Metadata and Predicted Probability of Human-Generated Personal Essay")
gt_mv_outcome
gt_mv_outcome <-
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Multivariate Analysis", subtitle = "Admissions Outcome vs. Application Metadata + Probability Human-Generated Essays")
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.html")
gt_mv_outcome
gt_mv_outcome <-
tbl_regression(mv_outcome_model, exponentiate = T) |>
bold_labels() |>
italicize_levels() |>
add_q() |>
bold_p(q = T) |>
as_gt() |>
gt::tab_header(title = "Multivariate Analysis", subtitle = "Admissions Outcome vs. Application Metadata + Essay Prediction")
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.html")
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.docx")
