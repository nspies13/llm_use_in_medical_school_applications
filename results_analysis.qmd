---
title: "results_analysis"
format: html
editor: visual
warning: false
code-fold: true
self-contained: true
---

## Load the Data and Configure Environment

```{r}

# Load Required Packages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gtsummary))

# Set ggplot theme
theme_ns <- theme(text = element_text(family = "Arial"),
                  plot.title = element_text(face = "bold.italic", size = 18, hjust = 0, margin = margin(0,0,4,0)),
                  plot.subtitle = element_text(face = "italic", size = 14, hjust = 0, margin = margin(0,0,4,0)),
                  axis.title = element_text(size = 14, face = "bold"),
                  legend.title = element_text(face = "bold", size = 12),
                  axis.line = element_line(),
                  axis.ticks = element_blank(),
                  axis.text = element_text(size = 12, face = "bold"),
                  panel.grid = element_blank(),
                  panel.background = element_blank(),
                  strip.text = element_text(size = 18, face = "italic"),
                  strip.background = element_blank())
theme_set(theme_ns)

# Load Data
metadata <- bind_rows(readxl::read_xlsx("../data/2022 Applicant List.xlsx"), readxl::read_xlsx("../data/2024 Applicant List.xlsx"))
other_essays <- readRDS("../results/essays_with_gptzero_preds_combined.rds")
personal_statements <- readRDS("../results/personal_comments_with_gptzero_preds_combined.rds")
controls <- readRDS("../results/controls_with_gptzero_preds_combined.rds")

# Combine Predictions with Applicant Metadata
results_full <- bind_rows(personal_statements, other_essays) |> left_join(metadata)
results <- results_full |> group_by(amcas_id, essay_type, year) |> slice_tail(n = 1) |> ungroup()

# Extract Relevant Columns and Reformat Necessary Features
model_input <- 
  results |> 
    transmute(essay_type, year, `Probability Human`, Confidence, Burstiness, status, visa_cd, total_gpa, appl_type_desc, gender, highest_total_score_2015, 
              age = as.numeric(ifelse(is.na(appl_submit_date), as_datetime(paste0(year, "-10-01")) - dob, appl_submit_date - dob))/365.25) |> 
    mutate(
      Outcome = case_when(grepl("Matriculate|Offer Accepted|Offer Declined|Withdraw After Acceptance|Rescind|Deferred", status) ~ "Accepted", 
                          grepl("Reject Before Interview|Waitlist Withdraw|Waitlist Declined|Reject|Waitlist Offered", status) ~ "Rejected", 
                          grepl("Withdraw Before Interview|Withdraw After Interview|MD Withdraw - MSTP Reject", status) ~ "Withdraw Before Action"),
      gender = case_when(grepl("Male|Man", gender) ~ "Male", grepl("Female|Woman", gender) ~ "Female", T ~ "Other"),
      visa_cd = ifelse(str_replace_na(visa_cd, "NO") == "NO", F, T),
      across(where(is.character), ~ fct_infreq(factor(.x)))) |> 
    rename(Essay = essay_type, Year = year, Visa = visa_cd, GPA = total_gpa, Program = appl_type_desc, `Self-Reported Gender` = gender, MCAT = highest_total_score_2015, Age = age) |>
    select(-status)

library(gt)
library(gtsummary)

# Summarise Inputs
gt_table1 <- 
  model_input |> 
  select(Year, Age, `Self-Reported Gender`, Program, Visa, GPA, MCAT) |>
  gtsummary::tbl_summary(by = Year, missing = "no") |> 
  add_p() |> 
  bold_p() |> 
  bold_labels() |> 
  italicize_levels()

gtsave(data = gt_table1 |> as_gt(), filename = "../figures/table1.docx")

```

## Controls Comparison

```{r}

tbl_summary(bind_rows(controls |> transmute(Year = year, `Probability Human`), model_input), by = Year)  


```

## Waterfall Probability Plot

```{r}
#| fig.width: 18
#| fig.height: 5

gg_waterfall_input <- model_input |> dplyr::filter(Essay == "Personal Comments") |> arrange(`Probability Human`) |> group_by(Year) |> mutate(x = row_number(), Year = factor(Year, levels = c("2024", "2022"))) |> mutate(y = 0.5 - `Probability Human`)

library(ggdist)
library(geomtextpath)
ggplot(gg_waterfall_input, aes(x = x, y = y, fill = Year)) + 
  geom_texthline(label = "Completely AI-Generated", yintercept = 0.5, hjust = 0.2, color = "grey60") + 
  geom_texthline(label = "Mostly AI-Generated", yintercept = 0.25, hjust = 0.2, color = "grey80") + 
  geom_texthline(label = "Mostly Human-Generated", yintercept = -0.25, hjust = 0.1, color = "grey80") +
  geom_texthline(label = "Completely Human-Generated", yintercept = -0.5, hjust = 0.1, color = "grey60") +
  geom_col(color = "black", linewidth = 0.1) + 
  scale_x_continuous(name = "Personal Comments Essays", expand = c(0, 0)) +
  scale_y_continuous(name = "Predicted Proportion of AI-Generated Text", breaks = c(-0.5, 0, 0.5), labels = c("0", "0.5", "1")) + 
  facet_wrap(~Year, nrow = 2, strip.position = "top") +
  theme(legend.position = "none", axis.text = element_blank(), axis.line.x = element_blank())
ggsave("../figures/waterfall_probability_plot.png", width = 10, height = 5, dpi = 600)
ggsave("../figures/waterfall_probability_plot.svg", width = 10, height = 5)
```

## Univariate Modeling

```{r}

gt_uv_all <- 
  tbl_uvregression(model_input |> transmute(Year, Essay, Age, `Self-Reported Gender`, Program, Visa, GPA = GPA * 10, MCAT, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |> 
    bold_labels() |>
    italicize_levels() |> 
    add_n(location = "level") |> 
    add_q() |> 
    bold_p(q = T) |>
    as_gt() |> 
    gt::tab_header(title = "Univariate Analysis", subtitle = "Application Metadata vs. Predicted Human-Generated Text")

```

## Univariate 2024 Only

```{r}
gt_uv_2024 <- 
  tbl_uvregression(model_input |> dplyr::filter(Year == 2024) |> transmute(Essay, Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA = GPA * 10, `Probability Human`), glm, y = `Probability Human`, exponentiate = T) |> 
    bold_labels() |>
    italicize_levels() |> 
    add_n(location = "level") |> 
    add_q() |> 
    bold_p(q = T) |> 
    as_gt() |> 
    gt::tab_header(title = "Univariate Analysis", subtitle = "Application Metadata vs. Predicted Human-Generated Text")

gt::gtsave(gt_uv_2024, "../figures/univariate_analysis.html")
gt::gtsave(gt_uv_2024, "../figures/univariate_analysis.docx")

gt_uv_2024
```

## Multivariate Modeling

```{r}

mv_model <- glm(`Probability Human` ~ ., data = model_input |> dplyr::filter(Year == "2024") |> transmute(Essay, Age, `Self-Reported Gender`, Program, Visa, GPA = GPA * 10, MCAT, `Probability Human`))

tbl_regression(mv_model, exponentiate = T) |> 
  bold_labels() |>
  italicize_levels() |> 
  add_q() |> 
  bold_p(q = T)

```

## Make Forest Plot

```{r}
#| fig.width: 8
#| fig.height: 5

forest_plot <- forestmodel::forest_model(mv_model, 
                          exponentiate = T, 
                          factor_separate_line = T,
                          format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))
ggsave("../figures/forest_plot.png", forest_plot, width = 8, height = 5, dpi = 600)
```

## Make Year-Wise ECDFs

```{r}
#| fig.width: 8
#| fig.height: 4

model_input |> ggplot(aes(x = `Probability Human`, color = Year)) + 
  stat_ecdf(linewidth = 1.5) + 
  scico::scale_color_scico_d(palette = "davos", end = 0.2, begin = 0.8) + 
  scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + 
  theme(strip.clip = "off")
```

## Make Year-Wise ECDFs by Application Round

```{r}
#| fig.width: 8
#| fig.height: 4

model_input |> ggplot(aes(x = `Probability Human`, color = Year, alpha = ifelse(Essay == "Personal Comments", "Primary", "Secondaries"))) + 
  stat_ecdf(linewidth = 1.5) + 
  scico::scale_color_scico_d(palette = "davos", end = 0.2, begin = 0.8) + 
  scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), labels = c("0", "0.25", "0.5", "0.75", "1")) + 
  theme(strip.clip = "off", legend.position = "none")
```

## Make MCAT Scatter

```{r}
#| fig.width: 8
#| fig.height: 5

suppressPackageStartupMessages(library(ggpmisc))

ggplot(model_input |> dplyr::filter(Year == 2024), aes(`Probability AI`, MCAT)) + 
  geom_point() + 
  stat_poly_eq(label.x = 0.9, label.y = 0.1) + 
  stat_poly_line()

```

## Make Outcome Models
```{r}
#| fig.width: 8
#| fig.height: 5
mv_outcome_input <- model_input |> 
  dplyr::filter(Year == 2024 & Essay == "Personal Comments") |> 
  drop_na(Outcome) |> 
  transmute(`Probability Human`, Age, `Self-Reported Gender`, Program, Visa, MCAT, GPA = GPA * 10, Outcome = factor(ifelse(Outcome == "Accepted", 1, 0))) |>
  drop_na()  
  
mv_outcome_model <- glm(Outcome ~ ., data = mv_outcome_input, family = "binomial")

gt_mv_outcome <- 
  tbl_regression(mv_outcome_model, exponentiate = T) |> 
  bold_labels() |>
  italicize_levels() |> 
  add_q() |> 
  bold_p(q = T) |> 
  as_gt() |> 
  gt::tab_header(title = "Multivariate Analysis", subtitle = "Admissions Outcome vs. Application Metadata + Essay Prediction")
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.html")
gt::gtsave(gt_mv_outcome, "../figures/outcome_mv_analysis.docx")

forestmodel::forest_model(mv_outcome_model, 
                          exponentiate = T, 
                          factor_separate_line = T,
                          format_options = forestmodel::forest_model_format_options(color = "black", shape = 15, text_size = 4, point_size = 1, banded = TRUE))

```

